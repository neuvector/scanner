// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReportRespAction int32

const (
	ReportRespAction_Done   ReportRespAction = 0
	ReportRespAction_Resend ReportRespAction = 1
)

var ReportRespAction_name = map[int32]string{
	0: "Done",
	1: "Resend",
}
var ReportRespAction_value = map[string]int32{
	"Done":   0,
	"Resend": 1,
}

func (x ReportRespAction) String() string {
	return proto.EnumName(ReportRespAction_name, int32(x))
}
func (ReportRespAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{0}
}

type StoreWatcherAction int32

const (
	StoreWatcherAction_PauseWatcher  StoreWatcherAction = 0
	StoreWatcherAction_ResumeWatcher StoreWatcherAction = 1
)

var StoreWatcherAction_name = map[int32]string{
	0: "PauseWatcher",
	1: "ResumeWatcher",
}
var StoreWatcherAction_value = map[string]int32{
	"PauseWatcher":  0,
	"ResumeWatcher": 1,
}

func (x StoreWatcherAction) String() string {
	return proto.EnumName(StoreWatcherAction_name, int32(x))
}
func (StoreWatcherAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{1}
}

type KickLoginSessionsType int32

const (
	KickLoginSessionsType_KickByServer KickLoginSessionsType = 0
	KickLoginSessionsType_KickByFed    KickLoginSessionsType = 1
	KickLoginSessionsType_KickByUser   KickLoginSessionsType = 2
)

var KickLoginSessionsType_name = map[int32]string{
	0: "KickByServer",
	1: "KickByFed",
	2: "KickByUser",
}
var KickLoginSessionsType_value = map[string]int32{
	"KickByServer": 0,
	"KickByFed":    1,
	"KickByUser":   2,
}

func (x KickLoginSessionsType) String() string {
	return proto.EnumName(KickLoginSessionsType_name, int32(x))
}
func (KickLoginSessionsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{2}
}

type ScannerRegisterData struct {
	CVEDBVersion         string                        `protobuf:"bytes,1,opt,name=CVEDBVersion,proto3" json:"CVEDBVersion,omitempty"`
	CVEDBCreateTime      string                        `protobuf:"bytes,2,opt,name=CVEDBCreateTime,proto3" json:"CVEDBCreateTime,omitempty"`
	CVEDB                map[string]*ScanVulnerability `protobuf:"bytes,3,rep,name=CVEDB,proto3" json:"CVEDB,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RPCServer            string                        `protobuf:"bytes,4,opt,name=RPCServer,proto3" json:"RPCServer,omitempty"`
	RPCServerPort        uint32                        `protobuf:"varint,5,opt,name=RPCServerPort,proto3" json:"RPCServerPort,omitempty"`
	ID                   string                        `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ScannerRegisterData) Reset()         { *m = ScannerRegisterData{} }
func (m *ScannerRegisterData) String() string { return proto.CompactTextString(m) }
func (*ScannerRegisterData) ProtoMessage()    {}
func (*ScannerRegisterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{0}
}
func (m *ScannerRegisterData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScannerRegisterData.Unmarshal(m, b)
}
func (m *ScannerRegisterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScannerRegisterData.Marshal(b, m, deterministic)
}
func (dst *ScannerRegisterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerRegisterData.Merge(dst, src)
}
func (m *ScannerRegisterData) XXX_Size() int {
	return xxx_messageInfo_ScannerRegisterData.Size(m)
}
func (m *ScannerRegisterData) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerRegisterData.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerRegisterData proto.InternalMessageInfo

func (m *ScannerRegisterData) GetCVEDBVersion() string {
	if m != nil {
		return m.CVEDBVersion
	}
	return ""
}

func (m *ScannerRegisterData) GetCVEDBCreateTime() string {
	if m != nil {
		return m.CVEDBCreateTime
	}
	return ""
}

func (m *ScannerRegisterData) GetCVEDB() map[string]*ScanVulnerability {
	if m != nil {
		return m.CVEDB
	}
	return nil
}

func (m *ScannerRegisterData) GetRPCServer() string {
	if m != nil {
		return m.RPCServer
	}
	return ""
}

func (m *ScannerRegisterData) GetRPCServerPort() uint32 {
	if m != nil {
		return m.RPCServerPort
	}
	return 0
}

func (m *ScannerRegisterData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ScannerDeregisterData struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScannerDeregisterData) Reset()         { *m = ScannerDeregisterData{} }
func (m *ScannerDeregisterData) String() string { return proto.CompactTextString(m) }
func (*ScannerDeregisterData) ProtoMessage()    {}
func (*ScannerDeregisterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{1}
}
func (m *ScannerDeregisterData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScannerDeregisterData.Unmarshal(m, b)
}
func (m *ScannerDeregisterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScannerDeregisterData.Marshal(b, m, deterministic)
}
func (dst *ScannerDeregisterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScannerDeregisterData.Merge(dst, src)
}
func (m *ScannerDeregisterData) XXX_Size() int {
	return xxx_messageInfo_ScannerDeregisterData.Size(m)
}
func (m *ScannerDeregisterData) XXX_DiscardUnknown() {
	xxx_messageInfo_ScannerDeregisterData.DiscardUnknown(m)
}

var xxx_messageInfo_ScannerDeregisterData proto.InternalMessageInfo

func (m *ScannerDeregisterData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CLUSFilePacket struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Len                  uint32   `protobuf:"varint,3,opt,name=Len,proto3" json:"Len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSFilePacket) Reset()         { *m = CLUSFilePacket{} }
func (m *CLUSFilePacket) String() string { return proto.CompactTextString(m) }
func (*CLUSFilePacket) ProtoMessage()    {}
func (*CLUSFilePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{2}
}
func (m *CLUSFilePacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSFilePacket.Unmarshal(m, b)
}
func (m *CLUSFilePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSFilePacket.Marshal(b, m, deterministic)
}
func (dst *CLUSFilePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSFilePacket.Merge(dst, src)
}
func (m *CLUSFilePacket) XXX_Size() int {
	return xxx_messageInfo_CLUSFilePacket.Size(m)
}
func (m *CLUSFilePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSFilePacket.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSFilePacket proto.InternalMessageInfo

func (m *CLUSFilePacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CLUSFilePacket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSFilePacket) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type CLUSAdmissionRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	HostID               string   `protobuf:"bytes,2,opt,name=HostID,proto3" json:"HostID,omitempty"`
	HostCPUs             int64    `protobuf:"varint,3,opt,name=HostCPUs,proto3" json:"HostCPUs,omitempty"`
	HostMemory           int64    `protobuf:"varint,4,opt,name=HostMemory,proto3" json:"HostMemory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSAdmissionRequest) Reset()         { *m = CLUSAdmissionRequest{} }
func (m *CLUSAdmissionRequest) String() string { return proto.CompactTextString(m) }
func (*CLUSAdmissionRequest) ProtoMessage()    {}
func (*CLUSAdmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{3}
}
func (m *CLUSAdmissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSAdmissionRequest.Unmarshal(m, b)
}
func (m *CLUSAdmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSAdmissionRequest.Marshal(b, m, deterministic)
}
func (dst *CLUSAdmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSAdmissionRequest.Merge(dst, src)
}
func (m *CLUSAdmissionRequest) XXX_Size() int {
	return xxx_messageInfo_CLUSAdmissionRequest.Size(m)
}
func (m *CLUSAdmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSAdmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSAdmissionRequest proto.InternalMessageInfo

func (m *CLUSAdmissionRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSAdmissionRequest) GetHostID() string {
	if m != nil {
		return m.HostID
	}
	return ""
}

func (m *CLUSAdmissionRequest) GetHostCPUs() int64 {
	if m != nil {
		return m.HostCPUs
	}
	return 0
}

func (m *CLUSAdmissionRequest) GetHostMemory() int64 {
	if m != nil {
		return m.HostMemory
	}
	return 0
}

type CLUSAdmissionResponse struct {
	Allowed              bool     `protobuf:"varint,1,opt,name=Allowed,proto3" json:"Allowed,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSAdmissionResponse) Reset()         { *m = CLUSAdmissionResponse{} }
func (m *CLUSAdmissionResponse) String() string { return proto.CompactTextString(m) }
func (*CLUSAdmissionResponse) ProtoMessage()    {}
func (*CLUSAdmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{4}
}
func (m *CLUSAdmissionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSAdmissionResponse.Unmarshal(m, b)
}
func (m *CLUSAdmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSAdmissionResponse.Marshal(b, m, deterministic)
}
func (dst *CLUSAdmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSAdmissionResponse.Merge(dst, src)
}
func (m *CLUSAdmissionResponse) XXX_Size() int {
	return xxx_messageInfo_CLUSAdmissionResponse.Size(m)
}
func (m *CLUSAdmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSAdmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSAdmissionResponse proto.InternalMessageInfo

func (m *CLUSAdmissionResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *CLUSAdmissionResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type CLUSProcProfileReq struct {
	GroupName            string   `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	User                 string   `protobuf:"bytes,4,opt,name=User,proto3" json:"User,omitempty"`
	Uid                  int32    `protobuf:"varint,5,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Hash                 []byte   `protobuf:"bytes,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Action               string   `protobuf:"bytes,7,opt,name=Action,proto3" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSProcProfileReq) Reset()         { *m = CLUSProcProfileReq{} }
func (m *CLUSProcProfileReq) String() string { return proto.CompactTextString(m) }
func (*CLUSProcProfileReq) ProtoMessage()    {}
func (*CLUSProcProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{5}
}
func (m *CLUSProcProfileReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProcProfileReq.Unmarshal(m, b)
}
func (m *CLUSProcProfileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProcProfileReq.Marshal(b, m, deterministic)
}
func (dst *CLUSProcProfileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProcProfileReq.Merge(dst, src)
}
func (m *CLUSProcProfileReq) XXX_Size() int {
	return xxx_messageInfo_CLUSProcProfileReq.Size(m)
}
func (m *CLUSProcProfileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProcProfileReq.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProcProfileReq proto.InternalMessageInfo

func (m *CLUSProcProfileReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSProcProfileReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSProcProfileReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSProcProfileReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CLUSProcProfileReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CLUSProcProfileReq) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CLUSProcProfileReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type CLUSProcProfileArray struct {
	Processes            []*CLUSProcProfileReq `protobuf:"bytes,1,rep,name=Processes,proto3" json:"Processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CLUSProcProfileArray) Reset()         { *m = CLUSProcProfileArray{} }
func (m *CLUSProcProfileArray) String() string { return proto.CompactTextString(m) }
func (*CLUSProcProfileArray) ProtoMessage()    {}
func (*CLUSProcProfileArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{6}
}
func (m *CLUSProcProfileArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProcProfileArray.Unmarshal(m, b)
}
func (m *CLUSProcProfileArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProcProfileArray.Marshal(b, m, deterministic)
}
func (dst *CLUSProcProfileArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProcProfileArray.Merge(dst, src)
}
func (m *CLUSProcProfileArray) XXX_Size() int {
	return xxx_messageInfo_CLUSProcProfileArray.Size(m)
}
func (m *CLUSProcProfileArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProcProfileArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProcProfileArray proto.InternalMessageInfo

func (m *CLUSProcProfileArray) GetProcesses() []*CLUSProcProfileReq {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CLUSFileAccessRuleReq struct {
	GroupName            string   `protobuf:"bytes,1,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Filter               string   `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSFileAccessRuleReq) Reset()         { *m = CLUSFileAccessRuleReq{} }
func (m *CLUSFileAccessRuleReq) String() string { return proto.CompactTextString(m) }
func (*CLUSFileAccessRuleReq) ProtoMessage()    {}
func (*CLUSFileAccessRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{7}
}
func (m *CLUSFileAccessRuleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSFileAccessRuleReq.Unmarshal(m, b)
}
func (m *CLUSFileAccessRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSFileAccessRuleReq.Marshal(b, m, deterministic)
}
func (dst *CLUSFileAccessRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSFileAccessRuleReq.Merge(dst, src)
}
func (m *CLUSFileAccessRuleReq) XXX_Size() int {
	return xxx_messageInfo_CLUSFileAccessRuleReq.Size(m)
}
func (m *CLUSFileAccessRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSFileAccessRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSFileAccessRuleReq proto.InternalMessageInfo

func (m *CLUSFileAccessRuleReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSFileAccessRuleReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CLUSFileAccessRuleReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type CLUSFileAccessRuleArray struct {
	Rules                []*CLUSFileAccessRuleReq `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CLUSFileAccessRuleArray) Reset()         { *m = CLUSFileAccessRuleArray{} }
func (m *CLUSFileAccessRuleArray) String() string { return proto.CompactTextString(m) }
func (*CLUSFileAccessRuleArray) ProtoMessage()    {}
func (*CLUSFileAccessRuleArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{8}
}
func (m *CLUSFileAccessRuleArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSFileAccessRuleArray.Unmarshal(m, b)
}
func (m *CLUSFileAccessRuleArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSFileAccessRuleArray.Marshal(b, m, deterministic)
}
func (dst *CLUSFileAccessRuleArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSFileAccessRuleArray.Merge(dst, src)
}
func (m *CLUSFileAccessRuleArray) XXX_Size() int {
	return xxx_messageInfo_CLUSFileAccessRuleArray.Size(m)
}
func (m *CLUSFileAccessRuleArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSFileAccessRuleArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSFileAccessRuleArray proto.InternalMessageInfo

func (m *CLUSFileAccessRuleArray) GetRules() []*CLUSFileAccessRuleReq {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSConnection struct {
	AgentID              string   `protobuf:"bytes,1,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	HostID               string   `protobuf:"bytes,2,opt,name=HostID,proto3" json:"HostID,omitempty"`
	ClientWL             string   `protobuf:"bytes,3,opt,name=ClientWL,proto3" json:"ClientWL,omitempty"`
	ServerWL             string   `protobuf:"bytes,4,opt,name=ServerWL,proto3" json:"ServerWL,omitempty"`
	ClientIP             []byte   `protobuf:"bytes,5,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	ServerIP             []byte   `protobuf:"bytes,6,opt,name=ServerIP,proto3" json:"ServerIP,omitempty"`
	Scope                string   `protobuf:"bytes,7,opt,name=Scope,proto3" json:"Scope,omitempty"`
	Network              string   `protobuf:"bytes,8,opt,name=Network,proto3" json:"Network,omitempty"`
	ClientPort           uint32   `protobuf:"varint,9,opt,name=ClientPort,proto3" json:"ClientPort,omitempty"`
	ServerPort           uint32   `protobuf:"varint,10,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`
	IPProto              uint32   `protobuf:"varint,11,opt,name=IPProto,proto3" json:"IPProto,omitempty"`
	Application          uint32   `protobuf:"varint,12,opt,name=Application,proto3" json:"Application,omitempty"`
	Bytes                uint64   `protobuf:"varint,13,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Sessions             uint32   `protobuf:"varint,14,opt,name=Sessions,proto3" json:"Sessions,omitempty"`
	FirstSeenAt          uint32   `protobuf:"varint,15,opt,name=FirstSeenAt,proto3" json:"FirstSeenAt,omitempty"`
	LastSeenAt           uint32   `protobuf:"varint,16,opt,name=LastSeenAt,proto3" json:"LastSeenAt,omitempty"`
	ThreatID             uint32   `protobuf:"varint,17,opt,name=ThreatID,proto3" json:"ThreatID,omitempty"`
	Severity             uint32   `protobuf:"varint,18,opt,name=Severity,proto3" json:"Severity,omitempty"`
	PolicyAction         uint32   `protobuf:"varint,19,opt,name=PolicyAction,proto3" json:"PolicyAction,omitempty"`
	Ingress              bool     `protobuf:"varint,20,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	ExternalPeer         bool     `protobuf:"varint,21,opt,name=ExternalPeer,proto3" json:"ExternalPeer,omitempty"`
	LocalPeer            bool     `protobuf:"varint,22,opt,name=LocalPeer,proto3" json:"LocalPeer,omitempty"`
	PolicyId             uint32   `protobuf:"varint,23,opt,name=PolicyId,proto3" json:"PolicyId,omitempty"`
	Violates             uint32   `protobuf:"varint,24,opt,name=Violates,proto3" json:"Violates,omitempty"`
	LogUID               string   `protobuf:"bytes,25,opt,name=LogUID,proto3" json:"LogUID,omitempty"`
	Xff                  bool     `protobuf:"varint,26,opt,name=Xff,proto3" json:"Xff,omitempty"`
	SvcExtIP             bool     `protobuf:"varint,27,opt,name=SvcExtIP,proto3" json:"SvcExtIP,omitempty"`
	ToSidecar            bool     `protobuf:"varint,28,opt,name=ToSidecar,proto3" json:"ToSidecar,omitempty"`
	MeshToSvr            bool     `protobuf:"varint,29,opt,name=MeshToSvr,proto3" json:"MeshToSvr,omitempty"`
	LinkLocal            bool     `protobuf:"varint,30,opt,name=LinkLocal,proto3" json:"LinkLocal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSConnection) Reset()         { *m = CLUSConnection{} }
func (m *CLUSConnection) String() string { return proto.CompactTextString(m) }
func (*CLUSConnection) ProtoMessage()    {}
func (*CLUSConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{9}
}
func (m *CLUSConnection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSConnection.Unmarshal(m, b)
}
func (m *CLUSConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSConnection.Marshal(b, m, deterministic)
}
func (dst *CLUSConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSConnection.Merge(dst, src)
}
func (m *CLUSConnection) XXX_Size() int {
	return xxx_messageInfo_CLUSConnection.Size(m)
}
func (m *CLUSConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSConnection.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSConnection proto.InternalMessageInfo

func (m *CLUSConnection) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *CLUSConnection) GetHostID() string {
	if m != nil {
		return m.HostID
	}
	return ""
}

func (m *CLUSConnection) GetClientWL() string {
	if m != nil {
		return m.ClientWL
	}
	return ""
}

func (m *CLUSConnection) GetServerWL() string {
	if m != nil {
		return m.ServerWL
	}
	return ""
}

func (m *CLUSConnection) GetClientIP() []byte {
	if m != nil {
		return m.ClientIP
	}
	return nil
}

func (m *CLUSConnection) GetServerIP() []byte {
	if m != nil {
		return m.ServerIP
	}
	return nil
}

func (m *CLUSConnection) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *CLUSConnection) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *CLUSConnection) GetClientPort() uint32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *CLUSConnection) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CLUSConnection) GetIPProto() uint32 {
	if m != nil {
		return m.IPProto
	}
	return 0
}

func (m *CLUSConnection) GetApplication() uint32 {
	if m != nil {
		return m.Application
	}
	return 0
}

func (m *CLUSConnection) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *CLUSConnection) GetSessions() uint32 {
	if m != nil {
		return m.Sessions
	}
	return 0
}

func (m *CLUSConnection) GetFirstSeenAt() uint32 {
	if m != nil {
		return m.FirstSeenAt
	}
	return 0
}

func (m *CLUSConnection) GetLastSeenAt() uint32 {
	if m != nil {
		return m.LastSeenAt
	}
	return 0
}

func (m *CLUSConnection) GetThreatID() uint32 {
	if m != nil {
		return m.ThreatID
	}
	return 0
}

func (m *CLUSConnection) GetSeverity() uint32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *CLUSConnection) GetPolicyAction() uint32 {
	if m != nil {
		return m.PolicyAction
	}
	return 0
}

func (m *CLUSConnection) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *CLUSConnection) GetExternalPeer() bool {
	if m != nil {
		return m.ExternalPeer
	}
	return false
}

func (m *CLUSConnection) GetLocalPeer() bool {
	if m != nil {
		return m.LocalPeer
	}
	return false
}

func (m *CLUSConnection) GetPolicyId() uint32 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

func (m *CLUSConnection) GetViolates() uint32 {
	if m != nil {
		return m.Violates
	}
	return 0
}

func (m *CLUSConnection) GetLogUID() string {
	if m != nil {
		return m.LogUID
	}
	return ""
}

func (m *CLUSConnection) GetXff() bool {
	if m != nil {
		return m.Xff
	}
	return false
}

func (m *CLUSConnection) GetSvcExtIP() bool {
	if m != nil {
		return m.SvcExtIP
	}
	return false
}

func (m *CLUSConnection) GetToSidecar() bool {
	if m != nil {
		return m.ToSidecar
	}
	return false
}

func (m *CLUSConnection) GetMeshToSvr() bool {
	if m != nil {
		return m.MeshToSvr
	}
	return false
}

func (m *CLUSConnection) GetLinkLocal() bool {
	if m != nil {
		return m.LinkLocal
	}
	return false
}

type CLUSConnectionArray struct {
	Connections          []*CLUSConnection `protobuf:"bytes,1,rep,name=Connections,proto3" json:"Connections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CLUSConnectionArray) Reset()         { *m = CLUSConnectionArray{} }
func (m *CLUSConnectionArray) String() string { return proto.CompactTextString(m) }
func (*CLUSConnectionArray) ProtoMessage()    {}
func (*CLUSConnectionArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{10}
}
func (m *CLUSConnectionArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSConnectionArray.Unmarshal(m, b)
}
func (m *CLUSConnectionArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSConnectionArray.Marshal(b, m, deterministic)
}
func (dst *CLUSConnectionArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSConnectionArray.Merge(dst, src)
}
func (m *CLUSConnectionArray) XXX_Size() int {
	return xxx_messageInfo_CLUSConnectionArray.Size(m)
}
func (m *CLUSConnectionArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSConnectionArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSConnectionArray proto.InternalMessageInfo

func (m *CLUSConnectionArray) GetConnections() []*CLUSConnection {
	if m != nil {
		return m.Connections
	}
	return nil
}

type CLUSReportResponse struct {
	Action               ReportRespAction `protobuf:"varint,1,opt,name=Action,proto3,enum=share.ReportRespAction" json:"Action,omitempty"`
	ReportInterval       uint32           `protobuf:"varint,2,opt,name=ReportInterval,proto3" json:"ReportInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CLUSReportResponse) Reset()         { *m = CLUSReportResponse{} }
func (m *CLUSReportResponse) String() string { return proto.CompactTextString(m) }
func (*CLUSReportResponse) ProtoMessage()    {}
func (*CLUSReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{11}
}
func (m *CLUSReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSReportResponse.Unmarshal(m, b)
}
func (m *CLUSReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSReportResponse.Marshal(b, m, deterministic)
}
func (dst *CLUSReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSReportResponse.Merge(dst, src)
}
func (m *CLUSReportResponse) XXX_Size() int {
	return xxx_messageInfo_CLUSReportResponse.Size(m)
}
func (m *CLUSReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSReportResponse proto.InternalMessageInfo

func (m *CLUSReportResponse) GetAction() ReportRespAction {
	if m != nil {
		return m.Action
	}
	return ReportRespAction_Done
}

func (m *CLUSReportResponse) GetReportInterval() uint32 {
	if m != nil {
		return m.ReportInterval
	}
	return 0
}

type CLUSSyncRequest struct {
	Category             string   `protobuf:"bytes,1,opt,name=Category,proto3" json:"Category,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSyncRequest) Reset()         { *m = CLUSSyncRequest{} }
func (m *CLUSSyncRequest) String() string { return proto.CompactTextString(m) }
func (*CLUSSyncRequest) ProtoMessage()    {}
func (*CLUSSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{12}
}
func (m *CLUSSyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSyncRequest.Unmarshal(m, b)
}
func (m *CLUSSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSyncRequest.Marshal(b, m, deterministic)
}
func (dst *CLUSSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSyncRequest.Merge(dst, src)
}
func (m *CLUSSyncRequest) XXX_Size() int {
	return xxx_messageInfo_CLUSSyncRequest.Size(m)
}
func (m *CLUSSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSyncRequest proto.InternalMessageInfo

func (m *CLUSSyncRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CLUSSyncRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type CLUSSyncReply struct {
	Category             string   `protobuf:"bytes,1,opt,name=Category,proto3" json:"Category,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSyncReply) Reset()         { *m = CLUSSyncReply{} }
func (m *CLUSSyncReply) String() string { return proto.CompactTextString(m) }
func (*CLUSSyncReply) ProtoMessage()    {}
func (*CLUSSyncReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{13}
}
func (m *CLUSSyncReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSyncReply.Unmarshal(m, b)
}
func (m *CLUSSyncReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSyncReply.Marshal(b, m, deterministic)
}
func (dst *CLUSSyncReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSyncReply.Merge(dst, src)
}
func (m *CLUSSyncReply) XXX_Size() int {
	return xxx_messageInfo_CLUSSyncReply.Size(m)
}
func (m *CLUSSyncReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSyncReply.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSyncReply proto.InternalMessageInfo

func (m *CLUSSyncReply) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CLUSSyncReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CLUSControllerCounter struct {
	GraphNodes           uint32   `protobuf:"varint,1,opt,name=GraphNodes,proto3" json:"GraphNodes,omitempty"`
	GoRoutines           uint32   `protobuf:"varint,2,opt,name=GoRoutines,proto3" json:"GoRoutines,omitempty"`
	Lsof                 []byte   `protobuf:"bytes,3,opt,name=Lsof,proto3" json:"Lsof,omitempty"`
	PS                   []byte   `protobuf:"bytes,4,opt,name=PS,proto3" json:"PS,omitempty"`
	ScanTasks            uint32   `protobuf:"varint,5,opt,name=ScanTasks,proto3" json:"ScanTasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSControllerCounter) Reset()         { *m = CLUSControllerCounter{} }
func (m *CLUSControllerCounter) String() string { return proto.CompactTextString(m) }
func (*CLUSControllerCounter) ProtoMessage()    {}
func (*CLUSControllerCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{14}
}
func (m *CLUSControllerCounter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSControllerCounter.Unmarshal(m, b)
}
func (m *CLUSControllerCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSControllerCounter.Marshal(b, m, deterministic)
}
func (dst *CLUSControllerCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSControllerCounter.Merge(dst, src)
}
func (m *CLUSControllerCounter) XXX_Size() int {
	return xxx_messageInfo_CLUSControllerCounter.Size(m)
}
func (m *CLUSControllerCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSControllerCounter.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSControllerCounter proto.InternalMessageInfo

func (m *CLUSControllerCounter) GetGraphNodes() uint32 {
	if m != nil {
		return m.GraphNodes
	}
	return 0
}

func (m *CLUSControllerCounter) GetGoRoutines() uint32 {
	if m != nil {
		return m.GoRoutines
	}
	return 0
}

func (m *CLUSControllerCounter) GetLsof() []byte {
	if m != nil {
		return m.Lsof
	}
	return nil
}

func (m *CLUSControllerCounter) GetPS() []byte {
	if m != nil {
		return m.PS
	}
	return nil
}

func (m *CLUSControllerCounter) GetScanTasks() uint32 {
	if m != nil {
		return m.ScanTasks
	}
	return 0
}

type CLUSGraphOps struct {
	From                 string   `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To                   string   `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Endpoint             string   `protobuf:"bytes,3,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	Alias                string   `protobuf:"bytes,4,opt,name=Alias,proto3" json:"Alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSGraphOps) Reset()         { *m = CLUSGraphOps{} }
func (m *CLUSGraphOps) String() string { return proto.CompactTextString(m) }
func (*CLUSGraphOps) ProtoMessage()    {}
func (*CLUSGraphOps) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{15}
}
func (m *CLUSGraphOps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSGraphOps.Unmarshal(m, b)
}
func (m *CLUSGraphOps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSGraphOps.Marshal(b, m, deterministic)
}
func (dst *CLUSGraphOps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSGraphOps.Merge(dst, src)
}
func (m *CLUSGraphOps) XXX_Size() int {
	return xxx_messageInfo_CLUSGraphOps.Size(m)
}
func (m *CLUSGraphOps) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSGraphOps.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSGraphOps proto.InternalMessageInfo

func (m *CLUSGraphOps) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CLUSGraphOps) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CLUSGraphOps) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *CLUSGraphOps) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type CLUSPolicyRuleCheck struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To                   string   `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Ports                string   `protobuf:"bytes,4,opt,name=Ports,proto3" json:"Ports,omitempty"`
	Applications         []uint32 `protobuf:"varint,5,rep,packed,name=Applications,proto3" json:"Applications,omitempty"`
	Learned              bool     `protobuf:"varint,6,opt,name=Learned,proto3" json:"Learned,omitempty"` // Deprecated: Do not use.
	Disabled             bool     `protobuf:"varint,7,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	CreatedTS            int64    `protobuf:"varint,8,opt,name=CreatedTS,proto3" json:"CreatedTS,omitempty"`
	LastModTS            int64    `protobuf:"varint,9,opt,name=LastModTS,proto3" json:"LastModTS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSPolicyRuleCheck) Reset()         { *m = CLUSPolicyRuleCheck{} }
func (m *CLUSPolicyRuleCheck) String() string { return proto.CompactTextString(m) }
func (*CLUSPolicyRuleCheck) ProtoMessage()    {}
func (*CLUSPolicyRuleCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{16}
}
func (m *CLUSPolicyRuleCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSPolicyRuleCheck.Unmarshal(m, b)
}
func (m *CLUSPolicyRuleCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSPolicyRuleCheck.Marshal(b, m, deterministic)
}
func (dst *CLUSPolicyRuleCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSPolicyRuleCheck.Merge(dst, src)
}
func (m *CLUSPolicyRuleCheck) XXX_Size() int {
	return xxx_messageInfo_CLUSPolicyRuleCheck.Size(m)
}
func (m *CLUSPolicyRuleCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSPolicyRuleCheck.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSPolicyRuleCheck proto.InternalMessageInfo

func (m *CLUSPolicyRuleCheck) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSPolicyRuleCheck) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CLUSPolicyRuleCheck) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CLUSPolicyRuleCheck) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *CLUSPolicyRuleCheck) GetApplications() []uint32 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// Deprecated: Do not use.
func (m *CLUSPolicyRuleCheck) GetLearned() bool {
	if m != nil {
		return m.Learned
	}
	return false
}

func (m *CLUSPolicyRuleCheck) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CLUSPolicyRuleCheck) GetCreatedTS() int64 {
	if m != nil {
		return m.CreatedTS
	}
	return 0
}

func (m *CLUSPolicyRuleCheck) GetLastModTS() int64 {
	if m != nil {
		return m.LastModTS
	}
	return 0
}

type CLUSPolicyRuleMismatch struct {
	ClusterRule          *CLUSPolicyRuleCheck `protobuf:"bytes,1,opt,name=ClusterRule,proto3" json:"ClusterRule,omitempty"`
	LearnedRule          *CLUSPolicyRuleCheck `protobuf:"bytes,2,opt,name=LearnedRule,proto3" json:"LearnedRule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CLUSPolicyRuleMismatch) Reset()         { *m = CLUSPolicyRuleMismatch{} }
func (m *CLUSPolicyRuleMismatch) String() string { return proto.CompactTextString(m) }
func (*CLUSPolicyRuleMismatch) ProtoMessage()    {}
func (*CLUSPolicyRuleMismatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{17}
}
func (m *CLUSPolicyRuleMismatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSPolicyRuleMismatch.Unmarshal(m, b)
}
func (m *CLUSPolicyRuleMismatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSPolicyRuleMismatch.Marshal(b, m, deterministic)
}
func (dst *CLUSPolicyRuleMismatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSPolicyRuleMismatch.Merge(dst, src)
}
func (m *CLUSPolicyRuleMismatch) XXX_Size() int {
	return xxx_messageInfo_CLUSPolicyRuleMismatch.Size(m)
}
func (m *CLUSPolicyRuleMismatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSPolicyRuleMismatch.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSPolicyRuleMismatch proto.InternalMessageInfo

func (m *CLUSPolicyRuleMismatch) GetClusterRule() *CLUSPolicyRuleCheck {
	if m != nil {
		return m.ClusterRule
	}
	return nil
}

func (m *CLUSPolicyRuleMismatch) GetLearnedRule() *CLUSPolicyRuleCheck {
	if m != nil {
		return m.LearnedRule
	}
	return nil
}

type CLUSPolicySyncStatus struct {
	Leader               bool                      `protobuf:"varint,1,opt,name=Leader,proto3" json:"Leader,omitempty"`
	GraphNodeCount       uint32                    `protobuf:"varint,2,opt,name=GraphNodeCount,proto3" json:"GraphNodeCount,omitempty"`
	LearnedRuleMax       uint32                    `protobuf:"varint,3,opt,name=LearnedRuleMax,proto3" json:"LearnedRuleMax,omitempty"`
	Mismatches           []*CLUSPolicyRuleMismatch `protobuf:"bytes,4,rep,name=Mismatches,proto3" json:"Mismatches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CLUSPolicySyncStatus) Reset()         { *m = CLUSPolicySyncStatus{} }
func (m *CLUSPolicySyncStatus) String() string { return proto.CompactTextString(m) }
func (*CLUSPolicySyncStatus) ProtoMessage()    {}
func (*CLUSPolicySyncStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{18}
}
func (m *CLUSPolicySyncStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSPolicySyncStatus.Unmarshal(m, b)
}
func (m *CLUSPolicySyncStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSPolicySyncStatus.Marshal(b, m, deterministic)
}
func (dst *CLUSPolicySyncStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSPolicySyncStatus.Merge(dst, src)
}
func (m *CLUSPolicySyncStatus) XXX_Size() int {
	return xxx_messageInfo_CLUSPolicySyncStatus.Size(m)
}
func (m *CLUSPolicySyncStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSPolicySyncStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSPolicySyncStatus proto.InternalMessageInfo

func (m *CLUSPolicySyncStatus) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

func (m *CLUSPolicySyncStatus) GetGraphNodeCount() uint32 {
	if m != nil {
		return m.GraphNodeCount
	}
	return 0
}

func (m *CLUSPolicySyncStatus) GetLearnedRuleMax() uint32 {
	if m != nil {
		return m.LearnedRuleMax
	}
	return 0
}

func (m *CLUSPolicySyncStatus) GetMismatches() []*CLUSPolicyRuleMismatch {
	if m != nil {
		return m.Mismatches
	}
	return nil
}

type CLUSStoreWatcherInfo struct {
	CtrlerID             string             `protobuf:"bytes,1,opt,name=CtrlerID,proto3" json:"CtrlerID,omitempty"`
	Key                  string             `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Action               StoreWatcherAction `protobuf:"varint,3,opt,name=Action,proto3,enum=share.StoreWatcherAction" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CLUSStoreWatcherInfo) Reset()         { *m = CLUSStoreWatcherInfo{} }
func (m *CLUSStoreWatcherInfo) String() string { return proto.CompactTextString(m) }
func (*CLUSStoreWatcherInfo) ProtoMessage()    {}
func (*CLUSStoreWatcherInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{19}
}
func (m *CLUSStoreWatcherInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSStoreWatcherInfo.Unmarshal(m, b)
}
func (m *CLUSStoreWatcherInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSStoreWatcherInfo.Marshal(b, m, deterministic)
}
func (dst *CLUSStoreWatcherInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSStoreWatcherInfo.Merge(dst, src)
}
func (m *CLUSStoreWatcherInfo) XXX_Size() int {
	return xxx_messageInfo_CLUSStoreWatcherInfo.Size(m)
}
func (m *CLUSStoreWatcherInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSStoreWatcherInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSStoreWatcherInfo proto.InternalMessageInfo

func (m *CLUSStoreWatcherInfo) GetCtrlerID() string {
	if m != nil {
		return m.CtrlerID
	}
	return ""
}

func (m *CLUSStoreWatcherInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CLUSStoreWatcherInfo) GetAction() StoreWatcherAction {
	if m != nil {
		return m.Action
	}
	return StoreWatcherAction_PauseWatcher
}

type CLUSKickLoginSessionsRequest struct {
	CtrlerID             string                `protobuf:"bytes,1,opt,name=CtrlerID,proto3" json:"CtrlerID,omitempty"`
	Type                 KickLoginSessionsType `protobuf:"varint,2,opt,name=Type,proto3,enum=share.KickLoginSessionsType" json:"Type,omitempty"`
	Server               string                `protobuf:"bytes,3,opt,name=Server,proto3" json:"Server,omitempty"`
	UserFullname         string                `protobuf:"bytes,4,opt,name=UserFullname,proto3" json:"UserFullname,omitempty"`
	UserServer           string                `protobuf:"bytes,5,opt,name=UserServer,proto3" json:"UserServer,omitempty"`
	UserName             string                `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CLUSKickLoginSessionsRequest) Reset()         { *m = CLUSKickLoginSessionsRequest{} }
func (m *CLUSKickLoginSessionsRequest) String() string { return proto.CompactTextString(m) }
func (*CLUSKickLoginSessionsRequest) ProtoMessage()    {}
func (*CLUSKickLoginSessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{20}
}
func (m *CLUSKickLoginSessionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSKickLoginSessionsRequest.Unmarshal(m, b)
}
func (m *CLUSKickLoginSessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSKickLoginSessionsRequest.Marshal(b, m, deterministic)
}
func (dst *CLUSKickLoginSessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSKickLoginSessionsRequest.Merge(dst, src)
}
func (m *CLUSKickLoginSessionsRequest) XXX_Size() int {
	return xxx_messageInfo_CLUSKickLoginSessionsRequest.Size(m)
}
func (m *CLUSKickLoginSessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSKickLoginSessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSKickLoginSessionsRequest proto.InternalMessageInfo

func (m *CLUSKickLoginSessionsRequest) GetCtrlerID() string {
	if m != nil {
		return m.CtrlerID
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetType() KickLoginSessionsType {
	if m != nil {
		return m.Type
	}
	return KickLoginSessionsType_KickByServer
}

func (m *CLUSKickLoginSessionsRequest) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetUserFullname() string {
	if m != nil {
		return m.UserFullname
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetUserServer() string {
	if m != nil {
		return m.UserServer
	}
	return ""
}

func (m *CLUSKickLoginSessionsRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type CLUSLoginTokenInfo struct {
	CtrlerID             string   `protobuf:"bytes,1,opt,name=CtrlerID,proto3" json:"CtrlerID,omitempty"`
	LoginID              string   `protobuf:"bytes,2,opt,name=LoginID,proto3" json:"LoginID,omitempty"`
	UserFullname         string   `protobuf:"bytes,3,opt,name=UserFullname,proto3" json:"UserFullname,omitempty"`
	LoginToken           string   `protobuf:"bytes,4,opt,name=LoginToken,proto3" json:"LoginToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSLoginTokenInfo) Reset()         { *m = CLUSLoginTokenInfo{} }
func (m *CLUSLoginTokenInfo) String() string { return proto.CompactTextString(m) }
func (*CLUSLoginTokenInfo) ProtoMessage()    {}
func (*CLUSLoginTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{21}
}
func (m *CLUSLoginTokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSLoginTokenInfo.Unmarshal(m, b)
}
func (m *CLUSLoginTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSLoginTokenInfo.Marshal(b, m, deterministic)
}
func (dst *CLUSLoginTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSLoginTokenInfo.Merge(dst, src)
}
func (m *CLUSLoginTokenInfo) XXX_Size() int {
	return xxx_messageInfo_CLUSLoginTokenInfo.Size(m)
}
func (m *CLUSLoginTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSLoginTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSLoginTokenInfo proto.InternalMessageInfo

func (m *CLUSLoginTokenInfo) GetCtrlerID() string {
	if m != nil {
		return m.CtrlerID
	}
	return ""
}

func (m *CLUSLoginTokenInfo) GetLoginID() string {
	if m != nil {
		return m.LoginID
	}
	return ""
}

func (m *CLUSLoginTokenInfo) GetUserFullname() string {
	if m != nil {
		return m.UserFullname
	}
	return ""
}

func (m *CLUSLoginTokenInfo) GetLoginToken() string {
	if m != nil {
		return m.LoginToken
	}
	return ""
}

type CLUSKubernetesResInfo struct {
	DocKey               string   `protobuf:"bytes,1,opt,name=DocKey,proto3" json:"DocKey,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSKubernetesResInfo) Reset()         { *m = CLUSKubernetesResInfo{} }
func (m *CLUSKubernetesResInfo) String() string { return proto.CompactTextString(m) }
func (*CLUSKubernetesResInfo) ProtoMessage()    {}
func (*CLUSKubernetesResInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_controller_service_a34f3a8f549408ae, []int{22}
}
func (m *CLUSKubernetesResInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSKubernetesResInfo.Unmarshal(m, b)
}
func (m *CLUSKubernetesResInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSKubernetesResInfo.Marshal(b, m, deterministic)
}
func (dst *CLUSKubernetesResInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSKubernetesResInfo.Merge(dst, src)
}
func (m *CLUSKubernetesResInfo) XXX_Size() int {
	return xxx_messageInfo_CLUSKubernetesResInfo.Size(m)
}
func (m *CLUSKubernetesResInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSKubernetesResInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSKubernetesResInfo proto.InternalMessageInfo

func (m *CLUSKubernetesResInfo) GetDocKey() string {
	if m != nil {
		return m.DocKey
	}
	return ""
}

func (m *CLUSKubernetesResInfo) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*ScannerRegisterData)(nil), "share.ScannerRegisterData")
	proto.RegisterMapType((map[string]*ScanVulnerability)(nil), "share.ScannerRegisterData.CVEDBEntry")
	proto.RegisterType((*ScannerDeregisterData)(nil), "share.ScannerDeregisterData")
	proto.RegisterType((*CLUSFilePacket)(nil), "share.CLUSFilePacket")
	proto.RegisterType((*CLUSAdmissionRequest)(nil), "share.CLUSAdmissionRequest")
	proto.RegisterType((*CLUSAdmissionResponse)(nil), "share.CLUSAdmissionResponse")
	proto.RegisterType((*CLUSProcProfileReq)(nil), "share.CLUSProcProfileReq")
	proto.RegisterType((*CLUSProcProfileArray)(nil), "share.CLUSProcProfileArray")
	proto.RegisterType((*CLUSFileAccessRuleReq)(nil), "share.CLUSFileAccessRuleReq")
	proto.RegisterType((*CLUSFileAccessRuleArray)(nil), "share.CLUSFileAccessRuleArray")
	proto.RegisterType((*CLUSConnection)(nil), "share.CLUSConnection")
	proto.RegisterType((*CLUSConnectionArray)(nil), "share.CLUSConnectionArray")
	proto.RegisterType((*CLUSReportResponse)(nil), "share.CLUSReportResponse")
	proto.RegisterType((*CLUSSyncRequest)(nil), "share.CLUSSyncRequest")
	proto.RegisterType((*CLUSSyncReply)(nil), "share.CLUSSyncReply")
	proto.RegisterType((*CLUSControllerCounter)(nil), "share.CLUSControllerCounter")
	proto.RegisterType((*CLUSGraphOps)(nil), "share.CLUSGraphOps")
	proto.RegisterType((*CLUSPolicyRuleCheck)(nil), "share.CLUSPolicyRuleCheck")
	proto.RegisterType((*CLUSPolicyRuleMismatch)(nil), "share.CLUSPolicyRuleMismatch")
	proto.RegisterType((*CLUSPolicySyncStatus)(nil), "share.CLUSPolicySyncStatus")
	proto.RegisterType((*CLUSStoreWatcherInfo)(nil), "share.CLUSStoreWatcherInfo")
	proto.RegisterType((*CLUSKickLoginSessionsRequest)(nil), "share.CLUSKickLoginSessionsRequest")
	proto.RegisterType((*CLUSLoginTokenInfo)(nil), "share.CLUSLoginTokenInfo")
	proto.RegisterType((*CLUSKubernetesResInfo)(nil), "share.CLUSKubernetesResInfo")
	proto.RegisterEnum("share.ReportRespAction", ReportRespAction_name, ReportRespAction_value)
	proto.RegisterEnum("share.StoreWatcherAction", StoreWatcherAction_name, StoreWatcherAction_value)
	proto.RegisterEnum("share.KickLoginSessionsType", KickLoginSessionsType_name, KickLoginSessionsType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerCapServiceClient is the client API for ControllerCapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerCapServiceClient interface {
	IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
}

type controllerCapServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerCapServiceClient(cc *grpc.ClientConn) ControllerCapServiceClient {
	return &controllerCapServiceClient{cc}
}

func (c *controllerCapServiceClient) IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := c.cc.Invoke(ctx, "/share.ControllerCapService/IsGRPCCompressed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerCapServiceServer is the server API for ControllerCapService service.
type ControllerCapServiceServer interface {
	IsGRPCCompressed(context.Context, *RPCVoid) (*CLUSBoolean, error)
}

func RegisterControllerCapServiceServer(s *grpc.Server, srv ControllerCapServiceServer) {
	s.RegisterService(&_ControllerCapService_serviceDesc, srv)
}

func _ControllerCapService_IsGRPCCompressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCapServiceServer).IsGRPCCompressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCapService/IsGRPCCompressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCapServiceServer).IsGRPCCompressed(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerCapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerCapService",
	HandlerType: (*ControllerCapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGRPCCompressed",
			Handler:    _ControllerCapService_IsGRPCCompressed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller_service.proto",
}

// ControllerScanServiceClient is the client API for ControllerScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerScanServiceClient interface {
	ScannerRegister(ctx context.Context, in *ScannerRegisterData, opts ...grpc.CallOption) (*RPCVoid, error)
	ScannerRegisterStream(ctx context.Context, opts ...grpc.CallOption) (ControllerScanService_ScannerRegisterStreamClient, error)
	ScannerDeregister(ctx context.Context, in *ScannerDeregisterData, opts ...grpc.CallOption) (*RPCVoid, error)
	SubmitScanResult(ctx context.Context, in *ScanResult, opts ...grpc.CallOption) (*RPCVoid, error)
}

type controllerScanServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerScanServiceClient(cc *grpc.ClientConn) ControllerScanServiceClient {
	return &controllerScanServiceClient{cc}
}

func (c *controllerScanServiceClient) ScannerRegister(ctx context.Context, in *ScannerRegisterData, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerScanService/ScannerRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerScanServiceClient) ScannerRegisterStream(ctx context.Context, opts ...grpc.CallOption) (ControllerScanService_ScannerRegisterStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerScanService_serviceDesc.Streams[0], "/share.ControllerScanService/ScannerRegisterStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerScanServiceScannerRegisterStreamClient{stream}
	return x, nil
}

type ControllerScanService_ScannerRegisterStreamClient interface {
	Send(*ScannerRegisterData) error
	CloseAndRecv() (*RPCVoid, error)
	grpc.ClientStream
}

type controllerScanServiceScannerRegisterStreamClient struct {
	grpc.ClientStream
}

func (x *controllerScanServiceScannerRegisterStreamClient) Send(m *ScannerRegisterData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerScanServiceScannerRegisterStreamClient) CloseAndRecv() (*RPCVoid, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RPCVoid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerScanServiceClient) ScannerDeregister(ctx context.Context, in *ScannerDeregisterData, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerScanService/ScannerDeregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerScanServiceClient) SubmitScanResult(ctx context.Context, in *ScanResult, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerScanService/SubmitScanResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerScanServiceServer is the server API for ControllerScanService service.
type ControllerScanServiceServer interface {
	ScannerRegister(context.Context, *ScannerRegisterData) (*RPCVoid, error)
	ScannerRegisterStream(ControllerScanService_ScannerRegisterStreamServer) error
	ScannerDeregister(context.Context, *ScannerDeregisterData) (*RPCVoid, error)
	SubmitScanResult(context.Context, *ScanResult) (*RPCVoid, error)
}

func RegisterControllerScanServiceServer(s *grpc.Server, srv ControllerScanServiceServer) {
	s.RegisterService(&_ControllerScanService_serviceDesc, srv)
}

func _ControllerScanService_ScannerRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerRegisterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanServiceServer).ScannerRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanService/ScannerRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanServiceServer).ScannerRegister(ctx, req.(*ScannerRegisterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerScanService_ScannerRegisterStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerScanServiceServer).ScannerRegisterStream(&controllerScanServiceScannerRegisterStreamServer{stream})
}

type ControllerScanService_ScannerRegisterStreamServer interface {
	SendAndClose(*RPCVoid) error
	Recv() (*ScannerRegisterData, error)
	grpc.ServerStream
}

type controllerScanServiceScannerRegisterStreamServer struct {
	grpc.ServerStream
}

func (x *controllerScanServiceScannerRegisterStreamServer) SendAndClose(m *RPCVoid) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerScanServiceScannerRegisterStreamServer) Recv() (*ScannerRegisterData, error) {
	m := new(ScannerRegisterData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControllerScanService_ScannerDeregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScannerDeregisterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanServiceServer).ScannerDeregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanService/ScannerDeregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanServiceServer).ScannerDeregister(ctx, req.(*ScannerDeregisterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerScanService_SubmitScanResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerScanServiceServer).SubmitScanResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerScanService/SubmitScanResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerScanServiceServer).SubmitScanResult(ctx, req.(*ScanResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerScanService",
	HandlerType: (*ControllerScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScannerRegister",
			Handler:    _ControllerScanService_ScannerRegister_Handler,
		},
		{
			MethodName: "ScannerDeregister",
			Handler:    _ControllerScanService_ScannerDeregister_Handler,
		},
		{
			MethodName: "SubmitScanResult",
			Handler:    _ControllerScanService_SubmitScanResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScannerRegisterStream",
			Handler:       _ControllerScanService_ScannerRegisterStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "controller_service.proto",
}

// ControllerUpgradeServiceClient is the client API for ControllerUpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerUpgradeServiceClient interface {
	UpgradeScannerDB(ctx context.Context, opts ...grpc.CallOption) (ControllerUpgradeService_UpgradeScannerDBClient, error)
	SupportRegularDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
	SupportUpgradeDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
}

type controllerUpgradeServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerUpgradeServiceClient(cc *grpc.ClientConn) ControllerUpgradeServiceClient {
	return &controllerUpgradeServiceClient{cc}
}

func (c *controllerUpgradeServiceClient) UpgradeScannerDB(ctx context.Context, opts ...grpc.CallOption) (ControllerUpgradeService_UpgradeScannerDBClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerUpgradeService_serviceDesc.Streams[0], "/share.ControllerUpgradeService/UpgradeScannerDB", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerUpgradeServiceUpgradeScannerDBClient{stream}
	return x, nil
}

type ControllerUpgradeService_UpgradeScannerDBClient interface {
	Send(*CLUSFilePacket) error
	CloseAndRecv() (*RPCVoid, error)
	grpc.ClientStream
}

type controllerUpgradeServiceUpgradeScannerDBClient struct {
	grpc.ClientStream
}

func (x *controllerUpgradeServiceUpgradeScannerDBClient) Send(m *CLUSFilePacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerUpgradeServiceUpgradeScannerDBClient) CloseAndRecv() (*RPCVoid, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RPCVoid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerUpgradeServiceClient) SupportRegularDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := c.cc.Invoke(ctx, "/share.ControllerUpgradeService/SupportRegularDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerUpgradeServiceClient) SupportUpgradeDB(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := c.cc.Invoke(ctx, "/share.ControllerUpgradeService/SupportUpgradeDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerUpgradeServiceServer is the server API for ControllerUpgradeService service.
type ControllerUpgradeServiceServer interface {
	UpgradeScannerDB(ControllerUpgradeService_UpgradeScannerDBServer) error
	SupportRegularDB(context.Context, *RPCVoid) (*CLUSBoolean, error)
	SupportUpgradeDB(context.Context, *RPCVoid) (*CLUSBoolean, error)
}

func RegisterControllerUpgradeServiceServer(s *grpc.Server, srv ControllerUpgradeServiceServer) {
	s.RegisterService(&_ControllerUpgradeService_serviceDesc, srv)
}

func _ControllerUpgradeService_UpgradeScannerDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerUpgradeServiceServer).UpgradeScannerDB(&controllerUpgradeServiceUpgradeScannerDBServer{stream})
}

type ControllerUpgradeService_UpgradeScannerDBServer interface {
	SendAndClose(*RPCVoid) error
	Recv() (*CLUSFilePacket, error)
	grpc.ServerStream
}

type controllerUpgradeServiceUpgradeScannerDBServer struct {
	grpc.ServerStream
}

func (x *controllerUpgradeServiceUpgradeScannerDBServer) SendAndClose(m *RPCVoid) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerUpgradeServiceUpgradeScannerDBServer) Recv() (*CLUSFilePacket, error) {
	m := new(CLUSFilePacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControllerUpgradeService_SupportRegularDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerUpgradeServiceServer).SupportRegularDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerUpgradeService/SupportRegularDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerUpgradeServiceServer).SupportRegularDB(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerUpgradeService_SupportUpgradeDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerUpgradeServiceServer).SupportUpgradeDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerUpgradeService/SupportUpgradeDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerUpgradeServiceServer).SupportUpgradeDB(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerUpgradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerUpgradeService",
	HandlerType: (*ControllerUpgradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupportRegularDB",
			Handler:    _ControllerUpgradeService_SupportRegularDB_Handler,
		},
		{
			MethodName: "SupportUpgradeDB",
			Handler:    _ControllerUpgradeService_SupportUpgradeDB_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpgradeScannerDB",
			Handler:       _ControllerUpgradeService_UpgradeScannerDB_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "controller_service.proto",
}

// ControllerAgentServiceClient is the client API for ControllerAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerAgentServiceClient interface {
	RequestAdmission(ctx context.Context, in *CLUSAdmissionRequest, opts ...grpc.CallOption) (*CLUSAdmissionResponse, error)
	ReportProcProfile(ctx context.Context, in *CLUSProcProfileArray, opts ...grpc.CallOption) (*CLUSReportResponse, error)
	ReportFileAccessRule(ctx context.Context, in *CLUSFileAccessRuleArray, opts ...grpc.CallOption) (*CLUSReportResponse, error)
	ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*CLUSReportResponse, error)
}

type controllerAgentServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerAgentServiceClient(cc *grpc.ClientConn) ControllerAgentServiceClient {
	return &controllerAgentServiceClient{cc}
}

func (c *controllerAgentServiceClient) RequestAdmission(ctx context.Context, in *CLUSAdmissionRequest, opts ...grpc.CallOption) (*CLUSAdmissionResponse, error) {
	out := new(CLUSAdmissionResponse)
	err := c.cc.Invoke(ctx, "/share.ControllerAgentService/RequestAdmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerAgentServiceClient) ReportProcProfile(ctx context.Context, in *CLUSProcProfileArray, opts ...grpc.CallOption) (*CLUSReportResponse, error) {
	out := new(CLUSReportResponse)
	err := c.cc.Invoke(ctx, "/share.ControllerAgentService/ReportProcProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerAgentServiceClient) ReportFileAccessRule(ctx context.Context, in *CLUSFileAccessRuleArray, opts ...grpc.CallOption) (*CLUSReportResponse, error) {
	out := new(CLUSReportResponse)
	err := c.cc.Invoke(ctx, "/share.ControllerAgentService/ReportFileAccessRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerAgentServiceClient) ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*CLUSReportResponse, error) {
	out := new(CLUSReportResponse)
	err := c.cc.Invoke(ctx, "/share.ControllerAgentService/ReportConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerAgentServiceServer is the server API for ControllerAgentService service.
type ControllerAgentServiceServer interface {
	RequestAdmission(context.Context, *CLUSAdmissionRequest) (*CLUSAdmissionResponse, error)
	ReportProcProfile(context.Context, *CLUSProcProfileArray) (*CLUSReportResponse, error)
	ReportFileAccessRule(context.Context, *CLUSFileAccessRuleArray) (*CLUSReportResponse, error)
	ReportConnections(context.Context, *CLUSConnectionArray) (*CLUSReportResponse, error)
}

func RegisterControllerAgentServiceServer(s *grpc.Server, srv ControllerAgentServiceServer) {
	s.RegisterService(&_ControllerAgentService_serviceDesc, srv)
}

func _ControllerAgentService_RequestAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).RequestAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/RequestAdmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).RequestAdmission(ctx, req.(*CLUSAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerAgentService_ReportProcProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSProcProfileArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).ReportProcProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/ReportProcProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).ReportProcProfile(ctx, req.(*CLUSProcProfileArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerAgentService_ReportFileAccessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFileAccessRuleArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).ReportFileAccessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/ReportFileAccessRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).ReportFileAccessRule(ctx, req.(*CLUSFileAccessRuleArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerAgentService_ReportConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSConnectionArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerAgentServiceServer).ReportConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerAgentService/ReportConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerAgentServiceServer).ReportConnections(ctx, req.(*CLUSConnectionArray))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerAgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerAgentService",
	HandlerType: (*ControllerAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAdmission",
			Handler:    _ControllerAgentService_RequestAdmission_Handler,
		},
		{
			MethodName: "ReportProcProfile",
			Handler:    _ControllerAgentService_ReportProcProfile_Handler,
		},
		{
			MethodName: "ReportFileAccessRule",
			Handler:    _ControllerAgentService_ReportFileAccessRule_Handler,
		},
		{
			MethodName: "ReportConnections",
			Handler:    _ControllerAgentService_ReportConnections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller_service.proto",
}

// ControllerCtrlServiceClient is the client API for ControllerCtrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerCtrlServiceClient interface {
	ReqSync(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (*CLUSSyncReply, error)
	ReqSyncStream(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (ControllerCtrlService_ReqSyncStreamClient, error)
	ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*RPCVoid, error)
	GetControllerCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSControllerCounter, error)
	DeleteConversation(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error)
	DeleteEndpoint(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error)
	SetEndpointAlias(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error)
	CheckPolicySyncStatus(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSPolicySyncStatus, error)
	TriggerSync(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error)
	TriggerSyncLearnedPolicy(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	PauseResumeStoreWatcher(ctx context.Context, in *CLUSStoreWatcherInfo, opts ...grpc.CallOption) (*RPCVoid, error)
	KickLoginSessions(ctx context.Context, in *CLUSKickLoginSessionsRequest, opts ...grpc.CallOption) (*RPCVoid, error)
	GetStats(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSStats, error)
	ResetLoginTokenTimer(ctx context.Context, in *CLUSLoginTokenInfo, opts ...grpc.CallOption) (*RPCVoid, error)
	ReportK8SResToOPA(ctx context.Context, in *CLUSKubernetesResInfo, opts ...grpc.CallOption) (*RPCVoid, error)
}

type controllerCtrlServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerCtrlServiceClient(cc *grpc.ClientConn) ControllerCtrlServiceClient {
	return &controllerCtrlServiceClient{cc}
}

func (c *controllerCtrlServiceClient) ReqSync(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (*CLUSSyncReply, error) {
	out := new(CLUSSyncReply)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/ReqSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ReqSyncStream(ctx context.Context, in *CLUSSyncRequest, opts ...grpc.CallOption) (ControllerCtrlService_ReqSyncStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerCtrlService_serviceDesc.Streams[0], "/share.ControllerCtrlService/ReqSyncStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerCtrlServiceReqSyncStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerCtrlService_ReqSyncStreamClient interface {
	Recv() (*CLUSSyncReply, error)
	grpc.ClientStream
}

type controllerCtrlServiceReqSyncStreamClient struct {
	grpc.ClientStream
}

func (x *controllerCtrlServiceReqSyncStreamClient) Recv() (*CLUSSyncReply, error) {
	m := new(CLUSSyncReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerCtrlServiceClient) ReportConnections(ctx context.Context, in *CLUSConnectionArray, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/ReportConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) GetControllerCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSControllerCounter, error) {
	out := new(CLUSControllerCounter)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/GetControllerCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) DeleteConversation(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/DeleteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) DeleteEndpoint(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) SetEndpointAlias(ctx context.Context, in *CLUSGraphOps, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/SetEndpointAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) CheckPolicySyncStatus(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSPolicySyncStatus, error) {
	out := new(CLUSPolicySyncStatus)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/CheckPolicySyncStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) TriggerSync(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/TriggerSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/ProfilingCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) TriggerSyncLearnedPolicy(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/TriggerSyncLearnedPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) PauseResumeStoreWatcher(ctx context.Context, in *CLUSStoreWatcherInfo, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/PauseResumeStoreWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) KickLoginSessions(ctx context.Context, in *CLUSKickLoginSessionsRequest, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/KickLoginSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) GetStats(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSStats, error) {
	out := new(CLUSStats)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ResetLoginTokenTimer(ctx context.Context, in *CLUSLoginTokenInfo, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/ResetLoginTokenTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerCtrlServiceClient) ReportK8SResToOPA(ctx context.Context, in *CLUSKubernetesResInfo, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ControllerCtrlService/ReportK8sResToOPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerCtrlServiceServer is the server API for ControllerCtrlService service.
type ControllerCtrlServiceServer interface {
	ReqSync(context.Context, *CLUSSyncRequest) (*CLUSSyncReply, error)
	ReqSyncStream(*CLUSSyncRequest, ControllerCtrlService_ReqSyncStreamServer) error
	ReportConnections(context.Context, *CLUSConnectionArray) (*RPCVoid, error)
	GetControllerCounter(context.Context, *RPCVoid) (*CLUSControllerCounter, error)
	DeleteConversation(context.Context, *CLUSGraphOps) (*RPCVoid, error)
	DeleteEndpoint(context.Context, *CLUSGraphOps) (*RPCVoid, error)
	SetEndpointAlias(context.Context, *CLUSGraphOps) (*RPCVoid, error)
	CheckPolicySyncStatus(context.Context, *RPCVoid) (*CLUSPolicySyncStatus, error)
	TriggerSync(context.Context, *RPCVoid) (*RPCVoid, error)
	ProfilingCmd(context.Context, *CLUSProfilingRequest) (*RPCVoid, error)
	TriggerSyncLearnedPolicy(context.Context, *RPCVoid) (*RPCVoid, error)
	PauseResumeStoreWatcher(context.Context, *CLUSStoreWatcherInfo) (*RPCVoid, error)
	KickLoginSessions(context.Context, *CLUSKickLoginSessionsRequest) (*RPCVoid, error)
	GetStats(context.Context, *RPCVoid) (*CLUSStats, error)
	ResetLoginTokenTimer(context.Context, *CLUSLoginTokenInfo) (*RPCVoid, error)
	ReportK8SResToOPA(context.Context, *CLUSKubernetesResInfo) (*RPCVoid, error)
}

func RegisterControllerCtrlServiceServer(s *grpc.Server, srv ControllerCtrlServiceServer) {
	s.RegisterService(&_ControllerCtrlService_serviceDesc, srv)
}

func _ControllerCtrlService_ReqSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ReqSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ReqSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ReqSync(ctx, req.(*CLUSSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ReqSyncStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSSyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerCtrlServiceServer).ReqSyncStream(m, &controllerCtrlServiceReqSyncStreamServer{stream})
}

type ControllerCtrlService_ReqSyncStreamServer interface {
	Send(*CLUSSyncReply) error
	grpc.ServerStream
}

type controllerCtrlServiceReqSyncStreamServer struct {
	grpc.ServerStream
}

func (x *controllerCtrlServiceReqSyncStreamServer) Send(m *CLUSSyncReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerCtrlService_ReportConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSConnectionArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ReportConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ReportConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ReportConnections(ctx, req.(*CLUSConnectionArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_GetControllerCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).GetControllerCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/GetControllerCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).GetControllerCounter(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSGraphOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).DeleteConversation(ctx, req.(*CLUSGraphOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSGraphOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).DeleteEndpoint(ctx, req.(*CLUSGraphOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_SetEndpointAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSGraphOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).SetEndpointAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/SetEndpointAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).SetEndpointAlias(ctx, req.(*CLUSGraphOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_CheckPolicySyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).CheckPolicySyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/CheckPolicySyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).CheckPolicySyncStatus(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_TriggerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).TriggerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/TriggerSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).TriggerSync(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ProfilingCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ProfilingCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ProfilingCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ProfilingCmd(ctx, req.(*CLUSProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_TriggerSyncLearnedPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).TriggerSyncLearnedPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/TriggerSyncLearnedPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).TriggerSyncLearnedPolicy(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_PauseResumeStoreWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSStoreWatcherInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).PauseResumeStoreWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/PauseResumeStoreWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).PauseResumeStoreWatcher(ctx, req.(*CLUSStoreWatcherInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_KickLoginSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSKickLoginSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).KickLoginSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/KickLoginSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).KickLoginSessions(ctx, req.(*CLUSKickLoginSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).GetStats(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ResetLoginTokenTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSLoginTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ResetLoginTokenTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ResetLoginTokenTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ResetLoginTokenTimer(ctx, req.(*CLUSLoginTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerCtrlService_ReportK8SResToOPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSKubernetesResInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerCtrlServiceServer).ReportK8SResToOPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ControllerCtrlService/ReportK8SResToOPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerCtrlServiceServer).ReportK8SResToOPA(ctx, req.(*CLUSKubernetesResInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerCtrlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ControllerCtrlService",
	HandlerType: (*ControllerCtrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqSync",
			Handler:    _ControllerCtrlService_ReqSync_Handler,
		},
		{
			MethodName: "ReportConnections",
			Handler:    _ControllerCtrlService_ReportConnections_Handler,
		},
		{
			MethodName: "GetControllerCounter",
			Handler:    _ControllerCtrlService_GetControllerCounter_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ControllerCtrlService_DeleteConversation_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _ControllerCtrlService_DeleteEndpoint_Handler,
		},
		{
			MethodName: "SetEndpointAlias",
			Handler:    _ControllerCtrlService_SetEndpointAlias_Handler,
		},
		{
			MethodName: "CheckPolicySyncStatus",
			Handler:    _ControllerCtrlService_CheckPolicySyncStatus_Handler,
		},
		{
			MethodName: "TriggerSync",
			Handler:    _ControllerCtrlService_TriggerSync_Handler,
		},
		{
			MethodName: "ProfilingCmd",
			Handler:    _ControllerCtrlService_ProfilingCmd_Handler,
		},
		{
			MethodName: "TriggerSyncLearnedPolicy",
			Handler:    _ControllerCtrlService_TriggerSyncLearnedPolicy_Handler,
		},
		{
			MethodName: "PauseResumeStoreWatcher",
			Handler:    _ControllerCtrlService_PauseResumeStoreWatcher_Handler,
		},
		{
			MethodName: "KickLoginSessions",
			Handler:    _ControllerCtrlService_KickLoginSessions_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ControllerCtrlService_GetStats_Handler,
		},
		{
			MethodName: "ResetLoginTokenTimer",
			Handler:    _ControllerCtrlService_ResetLoginTokenTimer_Handler,
		},
		{
			MethodName: "ReportK8sResToOPA",
			Handler:    _ControllerCtrlService_ReportK8SResToOPA_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReqSyncStream",
			Handler:       _ControllerCtrlService_ReqSyncStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller_service.proto",
}

func init() {
	proto.RegisterFile("controller_service.proto", fileDescriptor_controller_service_a34f3a8f549408ae)
}

var fileDescriptor_controller_service_a34f3a8f549408ae = []byte{
	// 2152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xcd, 0x6e, 0x1b, 0xc9,
	0xf1, 0xf7, 0x90, 0xfa, 0x2c, 0x51, 0x32, 0xd5, 0x96, 0xe4, 0x59, 0x5a, 0x6b, 0x18, 0xf3, 0xff,
	0x27, 0x11, 0x8c, 0xc4, 0xd9, 0x28, 0xc8, 0x7a, 0x77, 0x9d, 0x85, 0x41, 0x91, 0x92, 0xcd, 0x95,
	0x64, 0x33, 0x43, 0xca, 0xce, 0x2d, 0x18, 0x0f, 0xcb, 0xd4, 0x40, 0xc3, 0x69, 0xba, 0xbb, 0x29,
	0x9b, 0x79, 0x88, 0x9c, 0x02, 0x04, 0x79, 0x87, 0xbc, 0x42, 0xce, 0xc9, 0x3d, 0x6f, 0x10, 0xe4,
	0x1d, 0x82, 0xdc, 0x82, 0xea, 0x9e, 0x8f, 0xe6, 0x90, 0x8e, 0xec, 0xdb, 0xd4, 0xaf, 0xeb, 0xab,
	0xab, 0xab, 0xaa, 0xab, 0x07, 0xdc, 0x90, 0x27, 0x4a, 0xf0, 0x38, 0x46, 0xf1, 0x3b, 0x89, 0xe2,
	0x3a, 0x0a, 0xf1, 0xd1, 0x58, 0x70, 0xc5, 0xd9, 0xb2, 0xbc, 0x0c, 0x04, 0x36, 0x6a, 0x21, 0x1f,
	0x8d, 0x78, 0x62, 0xc0, 0x06, 0xc8, 0x30, 0x48, 0xbf, 0xbd, 0xbf, 0x57, 0xe0, 0x4e, 0x2f, 0x0c,
	0x92, 0x04, 0x85, 0x8f, 0xc3, 0x48, 0x2a, 0x14, 0xed, 0x40, 0x05, 0xcc, 0x83, 0x5a, 0xeb, 0xd5,
	0x71, 0xfb, 0xe8, 0x15, 0x0a, 0x19, 0xf1, 0xc4, 0x75, 0x1e, 0x38, 0x07, 0xeb, 0xfe, 0x0c, 0xc6,
	0x0e, 0xe0, 0xb6, 0xa6, 0x5b, 0x02, 0x03, 0x85, 0xfd, 0x68, 0x84, 0x6e, 0x45, 0xb3, 0x95, 0x61,
	0xf6, 0x04, 0x96, 0x35, 0xe4, 0x56, 0x1f, 0x54, 0x0f, 0x36, 0x0e, 0x7f, 0xf4, 0x48, 0xbb, 0xf5,
	0x68, 0x81, 0xe1, 0x47, 0x9a, 0xef, 0x38, 0x51, 0x62, 0xea, 0x1b, 0x19, 0xb6, 0x0f, 0xeb, 0x7e,
	0xb7, 0xd5, 0x43, 0x71, 0x8d, 0xc2, 0x5d, 0xd2, 0x06, 0x0a, 0x80, 0xfd, 0x3f, 0x6c, 0xe6, 0x44,
	0x97, 0x0b, 0xe5, 0x2e, 0x3f, 0x70, 0x0e, 0x36, 0xfd, 0x59, 0x90, 0x6d, 0x41, 0xa5, 0xd3, 0x76,
	0x57, 0xb4, 0x70, 0xa5, 0xd3, 0x6e, 0xf8, 0x00, 0x85, 0x21, 0x56, 0x87, 0xea, 0x15, 0x4e, 0xd3,
	0x3d, 0xd2, 0x27, 0x7b, 0x04, 0xcb, 0xd7, 0x41, 0x3c, 0x31, 0x1b, 0xda, 0x38, 0x74, 0x2d, 0x87,
	0x5f, 0x4d, 0xe2, 0x04, 0x45, 0xf0, 0x26, 0x8a, 0x23, 0x35, 0xf5, 0x0d, 0xdb, 0x77, 0x95, 0x6f,
	0x1c, 0xef, 0x27, 0xb0, 0x9b, 0x6e, 0xa8, 0x8d, 0xc2, 0x8e, 0xa5, 0x31, 0xee, 0x64, 0xc6, 0xbd,
	0x1f, 0x60, 0xab, 0x75, 0x76, 0xd1, 0x3b, 0x89, 0x62, 0xec, 0x06, 0xe1, 0x15, 0x2a, 0xc6, 0x60,
	0x89, 0x38, 0x35, 0x4f, 0xcd, 0xd7, 0xdf, 0x84, 0xbd, 0x08, 0xf2, 0x90, 0xea, 0x6f, 0x72, 0xf4,
	0x0c, 0x13, 0xb7, 0xaa, 0xb7, 0x48, 0x9f, 0xde, 0xef, 0x61, 0x87, 0x74, 0x35, 0x07, 0xa3, 0x48,
	0xd2, 0xa1, 0xf8, 0xf8, 0x6e, 0x82, 0x52, 0x95, 0x6d, 0xb2, 0x3d, 0x58, 0x79, 0xce, 0xa5, 0xea,
	0xb4, 0x53, 0x7d, 0x29, 0xc5, 0x1a, 0xb0, 0x46, 0x5f, 0xad, 0xee, 0x85, 0xd4, 0x6a, 0xab, 0x7e,
	0x4e, 0xb3, 0xfb, 0x00, 0xf4, 0x7d, 0x8e, 0x23, 0x2e, 0xa6, 0x3a, 0xf2, 0x55, 0xdf, 0x42, 0xbc,
	0x0e, 0xec, 0x96, 0x6c, 0xcb, 0x31, 0x4f, 0x24, 0x32, 0x17, 0x56, 0x9b, 0x71, 0xcc, 0xdf, 0xe3,
	0x40, 0x7b, 0xb0, 0xe6, 0x67, 0x24, 0xb9, 0xe1, 0x63, 0x20, 0x79, 0x92, 0xb9, 0x61, 0x28, 0xef,
	0x2f, 0x0e, 0x30, 0xd2, 0xd5, 0x15, 0x3c, 0xec, 0x0a, 0xfe, 0x36, 0x8a, 0xd1, 0xc7, 0x77, 0x74,
	0xf4, 0xcf, 0x04, 0x9f, 0x8c, 0x75, 0x20, 0xcc, 0x66, 0x0a, 0x60, 0x61, 0x84, 0x18, 0x2c, 0x75,
	0x03, 0x75, 0xa9, 0xf7, 0xb2, 0xee, 0xeb, 0x6f, 0xc2, 0x2e, 0x64, 0x9e, 0x3b, 0xfa, 0x9b, 0x22,
	0x79, 0x11, 0x0d, 0x74, 0xb2, 0x2c, 0xfb, 0xf4, 0x49, 0x5c, 0xcf, 0x03, 0x79, 0xa9, 0x93, 0xa4,
	0xe6, 0xeb, 0x6f, 0x72, 0xb7, 0x19, 0x2a, 0xca, 0xff, 0x55, 0xe3, 0xae, 0xa1, 0xbc, 0x97, 0x26,
	0xea, 0x96, 0xb7, 0x4d, 0x21, 0x82, 0x29, 0x7b, 0x0c, 0xeb, 0x84, 0xa1, 0x94, 0x28, 0x5d, 0x47,
	0xe7, 0xfa, 0x17, 0x69, 0xea, 0xcc, 0xef, 0xce, 0x2f, 0x78, 0xbd, 0xc0, 0x84, 0x92, 0x52, 0xa2,
	0x19, 0x12, 0xe6, 0x4f, 0x3e, 0x25, 0x02, 0x7b, 0xb0, 0x72, 0x12, 0xc5, 0x0a, 0x45, 0x16, 0x4e,
	0x43, 0x2d, 0x8a, 0x82, 0x77, 0x0e, 0x77, 0xe7, 0x4d, 0x18, 0xb7, 0x0f, 0x61, 0x99, 0x88, 0xcc,
	0xe5, 0x7d, 0xcb, 0xe5, 0x39, 0x8f, 0x7c, 0xc3, 0xea, 0xfd, 0x73, 0xc5, 0x64, 0x71, 0x8b, 0x27,
	0x09, 0xea, 0xa8, 0xe8, 0x63, 0x1f, 0x62, 0xa2, 0xf2, 0xc4, 0xcb, 0xc8, 0xff, 0x95, 0x7d, 0xad,
	0x38, 0xc2, 0x44, 0xbd, 0x3e, 0x4b, 0x7d, 0xcd, 0x69, 0x5a, 0x33, 0x05, 0xfc, 0xfa, 0x2c, 0x3d,
	0xb9, 0x9c, 0x2e, 0xe4, 0x3a, 0x5d, 0x7d, 0x84, 0x35, 0x3f, 0xa7, 0x0b, 0xb9, 0x4e, 0x37, 0x3d,
	0xcb, 0x9c, 0x66, 0x3b, 0xb0, 0xdc, 0x0b, 0xf9, 0x18, 0xd3, 0xe3, 0x34, 0x04, 0xf9, 0xfd, 0x02,
	0xd5, 0x7b, 0x2e, 0xae, 0xdc, 0x35, 0xe3, 0x77, 0x4a, 0x52, 0x05, 0x18, 0xbd, 0xba, 0xb3, 0xac,
	0xeb, 0xb2, 0xb3, 0x10, 0x5a, 0xb7, 0x3a, 0x0f, 0x98, 0x75, 0xab, 0xed, 0xb8, 0xb0, 0xda, 0xe9,
	0x76, 0xa9, 0xd1, 0xba, 0x1b, 0x7a, 0x31, 0x23, 0xd9, 0x03, 0xd8, 0x68, 0x8e, 0xc7, 0x71, 0x14,
	0x06, 0x3a, 0xbd, 0x6a, 0x7a, 0xd5, 0x86, 0xc8, 0xd7, 0xa3, 0xa9, 0x42, 0xe9, 0x6e, 0x3e, 0x70,
	0x0e, 0x96, 0x7c, 0x43, 0x98, 0xdd, 0xe9, 0x6a, 0x93, 0xee, 0x96, 0x16, 0xca, 0x69, 0xd2, 0x79,
	0x12, 0x09, 0xa9, 0x7a, 0x88, 0x49, 0x53, 0xb9, 0xb7, 0x8d, 0x4e, 0x0b, 0x22, 0x7f, 0xcf, 0x82,
	0x9c, 0xa1, 0x6e, 0xfc, 0x2d, 0x10, 0xd2, 0xde, 0xbf, 0xa4, 0xb6, 0xdd, 0x69, 0xbb, 0xdb, 0x46,
	0x7b, 0x46, 0x1b, 0xcb, 0xd7, 0x28, 0x22, 0x35, 0x75, 0x59, 0x66, 0xd9, 0xd0, 0x74, 0x5b, 0x74,
	0x79, 0x1c, 0x85, 0xd3, 0xb4, 0x5a, 0xee, 0xe8, 0xf5, 0x19, 0x4c, 0xc7, 0x22, 0x19, 0x0a, 0x94,
	0xd2, 0xdd, 0x31, 0x4d, 0x21, 0x25, 0x49, 0xfa, 0xf8, 0x83, 0x42, 0x91, 0x04, 0x71, 0x17, 0x51,
	0xb8, 0xbb, 0x7a, 0x79, 0x06, 0xa3, 0x3a, 0x38, 0xe3, 0x61, 0xca, 0xb0, 0xa7, 0x19, 0x0a, 0x80,
	0x7c, 0x33, 0xb6, 0x3a, 0x03, 0xf7, 0xae, 0xf1, 0x2d, 0xa3, 0x69, 0xed, 0x55, 0xc4, 0xe3, 0x80,
	0x42, 0xe9, 0x9a, 0xb5, 0x8c, 0xa6, 0xbc, 0x3c, 0xe3, 0xc3, 0x8b, 0x4e, 0xdb, 0xfd, 0xc2, 0xe4,
	0xa5, 0xa1, 0xa8, 0x3b, 0xfc, 0xf6, 0xed, 0x5b, 0xb7, 0xa1, 0xed, 0xd0, 0xa7, 0xde, 0xfd, 0x75,
	0x78, 0xfc, 0x81, 0x32, 0xee, 0x9e, 0x86, 0x73, 0x9a, 0x7c, 0xeb, 0xf3, 0x5e, 0x34, 0xc0, 0x30,
	0x10, 0xee, 0xbe, 0xf1, 0x2d, 0x07, 0x68, 0xf5, 0x1c, 0xe5, 0x65, 0x9f, 0xf7, 0xae, 0x85, 0xfb,
	0xa5, 0x59, 0xcd, 0x01, 0xbd, 0xaf, 0x28, 0xb9, 0xd2, 0x5b, 0x71, 0xef, 0xa7, 0xfb, 0xca, 0x00,
	0xef, 0x05, 0xdc, 0x99, 0xad, 0xb1, 0xac, 0xcd, 0x6c, 0x14, 0x50, 0x56, 0xb5, 0xbb, 0x56, 0xd5,
	0x16, 0xab, 0xbe, 0xcd, 0xe9, 0x8d, 0x4c, 0x97, 0xf5, 0x71, 0xcc, 0x85, 0xca, 0xdb, 0xf5, 0xcf,
	0xf3, 0x2e, 0x47, 0x65, 0xbb, 0x75, 0x78, 0x37, 0xd5, 0x54, 0xb0, 0x99, 0xe5, 0xac, 0xfd, 0xb1,
	0x1f, 0xc3, 0x96, 0x59, 0xeb, 0x24, 0x0a, 0xc5, 0x75, 0x10, 0xeb, 0xb2, 0xde, 0xf4, 0x4b, 0xa8,
	0xd7, 0x84, 0xdb, 0x64, 0xae, 0x37, 0x4d, 0xc2, 0xec, 0x5e, 0xa2, 0xca, 0x0d, 0x14, 0x0e, 0xe9,
	0x46, 0x71, 0xd2, 0x8a, 0x4f, 0x69, 0xea, 0x5a, 0x27, 0x82, 0x8f, 0xb2, 0x7e, 0x4e, 0xdf, 0xde,
	0x53, 0xd8, 0x2c, 0x54, 0x8c, 0xe3, 0xe9, 0x4d, 0x0a, 0xf4, 0x35, 0x5a, 0x29, 0xae, 0x51, 0xef,
	0xcf, 0x8e, 0x69, 0xad, 0xad, 0x7c, 0x44, 0x6a, 0xf1, 0x09, 0x39, 0x48, 0xc5, 0xf0, 0x4c, 0x04,
	0xe3, 0xcb, 0x17, 0x7c, 0xa0, 0x5b, 0x9f, 0x2e, 0x86, 0x02, 0xd1, 0xeb, 0xdc, 0xe7, 0x13, 0x15,
	0x25, 0x28, 0xd3, 0x1d, 0x5a, 0x08, 0x59, 0x3b, 0x93, 0xfc, 0xad, 0x6e, 0x5c, 0x35, 0x5f, 0x7f,
	0xd3, 0xb5, 0xdb, 0xed, 0xe9, 0x76, 0x55, 0xf3, 0x2b, 0xdd, 0x1e, 0x1d, 0x2f, 0xcd, 0x04, 0xfd,
	0x40, 0x5e, 0xc9, 0x74, 0x32, 0x29, 0x00, 0x6f, 0x00, 0x35, 0x72, 0x4d, 0xdb, 0x7c, 0x39, 0x96,
	0x79, 0x00, 0x9c, 0x22, 0x00, 0xa4, 0xb1, 0xcf, 0xd3, 0x90, 0x54, 0xfa, 0x9c, 0xf6, 0x7f, 0x9c,
	0x0c, 0xc6, 0x3c, 0x4a, 0x54, 0xd6, 0x32, 0x33, 0x9a, 0x5a, 0x46, 0x33, 0x8e, 0x02, 0x99, 0xf6,
	0x4b, 0x43, 0x78, 0xff, 0x71, 0x4c, 0x16, 0x99, 0x8a, 0xa0, 0xee, 0xdd, 0xba, 0xc4, 0xf0, 0xca,
	0x1a, 0x11, 0x36, 0xf5, 0x88, 0xb0, 0x20, 0xfc, 0xa9, 0xf5, 0x6a, 0x6e, 0x7d, 0x07, 0x96, 0xa9,
	0xb1, 0xe5, 0x16, 0x34, 0x41, 0x05, 0x6c, 0x75, 0x2e, 0xda, 0x68, 0x95, 0xca, 0xdf, 0xc6, 0xd8,
	0x3e, 0xac, 0x9e, 0x61, 0x20, 0x12, 0x1c, 0xe8, 0xae, 0xbc, 0x76, 0x54, 0x71, 0x1d, 0x3f, 0x83,
	0x68, 0x57, 0xed, 0x48, 0x06, 0x6f, 0x62, 0x1c, 0xe8, 0xde, 0xbc, 0xe6, 0xe7, 0x34, 0xc5, 0xd0,
	0x8c, 0x92, 0x83, 0x7e, 0x4f, 0x37, 0xe8, 0xaa, 0x5f, 0x00, 0xba, 0x80, 0x02, 0xa9, 0xce, 0x39,
	0xad, 0xae, 0x9b, 0xd5, 0x1c, 0xf0, 0xfe, 0xe8, 0xc0, 0xde, 0xec, 0xde, 0xcf, 0x23, 0x39, 0x0a,
	0x54, 0x78, 0xc9, 0x7e, 0x0d, 0x1b, 0xad, 0x78, 0x42, 0x43, 0x1a, 0xc1, 0x3a, 0x0e, 0x1b, 0x87,
	0x0d, 0xfb, 0xb6, 0x9e, 0x8d, 0x97, 0x6f, 0xb3, 0x93, 0x74, 0xea, 0xbb, 0x96, 0xae, 0xdc, 0x2c,
	0x6d, 0xb1, 0x7b, 0x7f, 0x75, 0xd2, 0x01, 0x42, 0x33, 0x51, 0x72, 0xf7, 0x54, 0xa0, 0x26, 0xa6,
	0x21, 0x61, 0x30, 0x40, 0x91, 0x0e, 0x4e, 0x29, 0x45, 0x15, 0x97, 0x67, 0xa6, 0xce, 0xdf, 0xac,
	0xe2, 0x66, 0x51, 0xe2, 0xb3, 0xec, 0x9c, 0x07, 0x1f, 0xd2, 0x59, 0xb1, 0x84, 0xb2, 0xef, 0x01,
	0xb2, 0x40, 0x20, 0x1d, 0x26, 0x35, 0x90, 0x2f, 0x17, 0x7a, 0x9f, 0xb1, 0xf9, 0x96, 0x80, 0xf7,
	0xde, 0xb8, 0xdf, 0x53, 0x5c, 0xe0, 0x6b, 0x8d, 0x89, 0x4e, 0xf2, 0x56, 0x27, 0x67, 0x4b, 0x89,
	0x18, 0x45, 0x3e, 0x02, 0xe4, 0x34, 0xf5, 0xd4, 0x53, 0x9c, 0xa6, 0xd9, 0x45, 0x9f, 0xec, 0x17,
	0x79, 0xdf, 0xa9, 0xea, 0xbe, 0x93, 0x8d, 0x4a, 0xb6, 0xda, 0xd9, 0xce, 0xe3, 0xfd, 0xcb, 0x81,
	0x7d, 0xb2, 0x7c, 0x1a, 0x85, 0x57, 0x67, 0x7c, 0x18, 0x25, 0xd9, 0xe5, 0x67, 0xf7, 0x97, 0x8f,
	0x79, 0xf0, 0x15, 0x2c, 0xf5, 0xa7, 0x63, 0x73, 0x58, 0x5b, 0xf9, 0x94, 0x33, 0xa7, 0x8a, 0x78,
	0x7c, 0xcd, 0x49, 0xc7, 0x91, 0xbe, 0x3b, 0x4c, 0x09, 0xa4, 0x14, 0x25, 0x3c, 0x4d, 0x91, 0x27,
	0x93, 0x38, 0x4e, 0x68, 0x30, 0x33, 0xd5, 0x30, 0x83, 0x51, 0xfb, 0x20, 0x3a, 0x95, 0x5f, 0xd6,
	0x1c, 0x16, 0x42, 0x9e, 0x12, 0xa5, 0x07, 0x3b, 0xf3, 0x30, 0xc9, 0x69, 0xef, 0x0f, 0xe9, 0x38,
	0xac, 0xfd, 0xea, 0xf3, 0x2b, 0x4c, 0x6e, 0x0c, 0xaf, 0x0b, 0xab, 0x9a, 0x3b, 0x9f, 0xb1, 0x32,
	0x72, 0xce, 0xd9, 0xea, 0x62, 0x67, 0x0b, 0x5b, 0xe9, 0x76, 0x2c, 0xc4, 0x6b, 0x99, 0x26, 0x7a,
	0x3a, 0x79, 0x83, 0x22, 0x41, 0x85, 0xd2, 0x47, 0xa9, 0x5d, 0xda, 0x83, 0x95, 0x36, 0x0f, 0x4f,
	0xf3, 0xd7, 0x53, 0x4a, 0xcd, 0xb4, 0xe2, 0x75, 0xd3, 0x8a, 0x1f, 0x1e, 0x40, 0xbd, 0x7c, 0xa5,
	0xb0, 0x35, 0x58, 0x6a, 0xf3, 0x04, 0xeb, 0xb7, 0x18, 0xd0, 0xd3, 0x40, 0x62, 0x32, 0xa8, 0x3b,
	0x0f, 0xbf, 0x05, 0x36, 0x9f, 0x04, 0xac, 0x0e, 0xb5, 0x6e, 0x30, 0x91, 0x19, 0x5a, 0xbf, 0xc5,
	0xb6, 0x61, 0xd3, 0x47, 0x39, 0x19, 0xe5, 0x90, 0xf3, 0xf0, 0x39, 0xec, 0x2e, 0x3c, 0x51, 0x92,
	0xa6, 0x85, 0xa3, 0xa9, 0x89, 0x7f, 0xfd, 0x16, 0xdb, 0x84, 0x75, 0x83, 0x9c, 0xe0, 0xa0, 0xee,
	0xb0, 0x2d, 0x00, 0x43, 0x52, 0x64, 0xea, 0x95, 0xc3, 0x17, 0xb0, 0x63, 0x5d, 0x1a, 0xc1, 0xb8,
	0x67, 0x5e, 0xd6, 0xec, 0x6b, 0xa8, 0x77, 0xe4, 0x33, 0xbf, 0xdb, 0x6a, 0xf1, 0xd1, 0x98, 0x06,
	0x18, 0x1c, 0xb0, 0xad, 0xec, 0xca, 0xec, 0xb6, 0x5e, 0xf1, 0x68, 0xd0, 0x60, 0x56, 0x2d, 0x1d,
	0x71, 0x1e, 0x63, 0x90, 0x1c, 0xfe, 0xa9, 0x02, 0xbb, 0x85, 0x42, 0xba, 0x05, 0x32, 0x8d, 0xdf,
	0xc3, 0xed, 0xd2, 0x53, 0x98, 0x35, 0x3e, 0xfe, 0x44, 0x6e, 0x94, 0x8c, 0xb1, 0xe3, 0xfc, 0xe1,
	0x99, 0xb1, 0xf5, 0x94, 0xc0, 0x60, 0xf4, 0x39, 0x4a, 0x0e, 0x1c, 0xd6, 0x84, 0xed, 0xb9, 0xf7,
	0x2b, 0xdb, 0x9f, 0x55, 0x31, 0xfb, 0xb2, 0x9d, 0xf3, 0xe4, 0x57, 0x50, 0xef, 0x4d, 0xde, 0x8c,
	0x22, 0x45, 0xec, 0x74, 0x32, 0xb1, 0x62, 0xdb, 0x96, 0x06, 0x03, 0x95, 0xc5, 0x0e, 0xff, 0xe6,
	0x80, 0x5b, 0x44, 0xe6, 0x62, 0x3c, 0x14, 0xc1, 0x00, 0xb3, 0xe0, 0x3c, 0x81, 0x7a, 0x86, 0xa4,
	0x3e, 0x1c, 0xb1, 0xdd, 0xd2, 0x0b, 0xc5, 0x3c, 0xa3, 0x17, 0xec, 0xe9, 0x6b, 0x72, 0x68, 0x6c,
	0x72, 0x6e, 0x38, 0x89, 0x03, 0x12, 0xfe, 0x84, 0xb3, 0xb2, 0xe4, 0x52, 0xdb, 0x9f, 0x26, 0x77,
	0xf8, 0x8f, 0x0a, 0xec, 0x15, 0x3b, 0xd1, 0xcf, 0x9f, 0x6c, 0x1f, 0xe7, 0x94, 0xfd, 0xba, 0x49,
	0xe5, 0x0f, 0x66, 0x76, 0xcf, 0x52, 0x51, 0x7e, 0xc2, 0x37, 0xf6, 0x17, 0x2f, 0xa6, 0x43, 0xdb,
	0x29, 0x6c, 0x9b, 0x62, 0xb2, 0x1e, 0x95, 0x33, 0xfa, 0xca, 0x8f, 0xd3, 0x86, 0xfd, 0x12, 0x2d,
	0x4d, 0x80, 0xbf, 0x81, 0x1d, 0x83, 0xcc, 0x3e, 0xf7, 0xd8, 0xfd, 0x8f, 0xbe, 0x04, 0x6f, 0x54,
	0xf9, 0x43, 0xe6, 0x9f, 0x35, 0x7f, 0xb2, 0xc6, 0xc2, 0x19, 0xf5, 0x26, 0x5d, 0x87, 0xff, 0x5e,
	0xb5, 0x2b, 0x87, 0x5a, 0x5e, 0x16, 0xd4, 0xc7, 0xb0, 0xea, 0xe3, 0x3b, 0xba, 0x40, 0xd9, 0x9e,
	0x25, 0x6f, 0x4d, 0x9c, 0x8d, 0x9d, 0x39, 0x9c, 0xc6, 0xc8, 0xa7, 0xd4, 0x39, 0xde, 0x99, 0x9b,
	0x57, 0xd7, 0xca, 0x67, 0x89, 0x7f, 0xe5, 0xb0, 0xa7, 0x9f, 0xbb, 0xbf, 0x72, 0xad, 0xb4, 0x61,
	0xe7, 0x19, 0xaa, 0xf9, 0xb1, 0xb4, 0x9c, 0x66, 0xfb, 0xb3, 0x3a, 0x4b, 0xdc, 0xdf, 0x02, 0x6b,
	0x63, 0x8c, 0x0a, 0x5b, 0x3c, 0xb9, 0x46, 0x21, 0xcd, 0xdb, 0xf1, 0x8e, 0x25, 0x93, 0x4d, 0x97,
	0x0b, 0x8a, 0x75, 0xcb, 0x88, 0xe6, 0xf3, 0xe3, 0x27, 0x89, 0x3d, 0x86, 0x7a, 0x0f, 0x55, 0x26,
	0xa3, 0x47, 0xcc, 0x4f, 0x13, 0x6c, 0xc3, 0xae, 0x1e, 0x85, 0xe6, 0x86, 0x9e, 0xf2, 0x8e, 0xef,
	0xcd, 0x0d, 0x22, 0x16, 0xf3, 0xcf, 0x60, 0xa3, 0x2f, 0xa2, 0xe1, 0x10, 0x85, 0x3e, 0xf5, 0xb2,
	0x6c, 0xd9, 0xe8, 0x13, 0xa8, 0x99, 0x22, 0x88, 0x92, 0x61, 0x6b, 0x34, 0x28, 0x57, 0x88, 0x59,
	0xc8, 0xce, 0xba, 0x2c, 0xfc, 0x1d, 0xb8, 0x96, 0xad, 0x74, 0x84, 0x32, 0x1e, 0xdd, 0x68, 0xf8,
	0x04, 0xee, 0xea, 0xcb, 0xca, 0xdc, 0x4f, 0xf6, 0x6d, 0x36, 0xe3, 0x43, 0x79, 0x84, 0x9a, 0xd3,
	0xf3, 0x1c, 0xb6, 0xe7, 0xee, 0x33, 0xf6, 0x7f, 0x96, 0x86, 0x8f, 0x8d, 0x42, 0x73, 0x9a, 0x7e,
	0x0a, 0x6b, 0xcf, 0x50, 0x51, 0x18, 0xe7, 0x43, 0x5e, 0x9f, 0x71, 0x89, 0x38, 0x9a, 0xd4, 0x12,
	0x24, 0xaa, 0x62, 0x08, 0xe8, 0x47, 0x23, 0x14, 0xcc, 0x2e, 0xd3, 0xd9, 0xf1, 0x64, 0xce, 0x60,
	0x33, 0x2b, 0x91, 0xd3, 0x6f, 0x68, 0x5e, 0xe8, 0xf3, 0x97, 0xdd, 0x26, 0xb3, 0xd3, 0x79, 0x6e,
	0x9c, 0x28, 0xab, 0x78, 0xb3, 0xa2, 0xff, 0x52, 0xff, 0xf2, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xb2, 0x95, 0xc5, 0x57, 0xe2, 0x16, 0x00, 0x00,
}
